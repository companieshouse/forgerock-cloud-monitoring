var synthetics = require('Synthetics');
const log = require('SyntheticsLogger');

const rcsMonitoring = async function () {
    
    let accessToken;
    const = {FIDC_URL, USER, PASSWORD, ADMIN_CLIENT, ADMIN_CLIENT_SECRET}
    
    // Handle validation for positive scenario
    const validateSuccessfull1 = async function(res) {
        return new Promise((resolve, reject) => {
            if (res.statusCode < 200 || res.statusCode > 299) {
                throw res.statusCode + ' ' + res.statusMessage;
            }
     
            let responseBody = '';
            res.on('data', (d) => {
                responseBody += d;
            });
     
            res.on('end', () => {
                // Add validation on 'responseBody' here if required.
                accessToken = JSON.parse(responseBody).access_token;
                console.log(accessToken)
                resolve();
            });
        });
    };
    
    const validateSuccessfull2 = async function(res) {
        return new Promise((resolve, reject) => {
            if (res.statusCode < 200 || res.statusCode > 299) {
                throw res.statusCode + ' ' + res.statusMessage;
            }
     
            let responseBody = '';
            res.on('data', (d) => {
                responseBody += d;
            });
     
            res.on('end', () => {
                // Add validation on 'responseBody' here if required.
                console.log(responseBody)
                resolve();
            });
        });
    };
    

    // Set request option for Get Access Token
    let requestOptionsStep1 = {
        hostname: FIDC_URL.replace('https://', ''),
        method: 'POST',
        path: '/am/oauth2/realms/root/realms/alpha/access_token?auth_chain=PasswordGrant',
        port: '443',
        protocol: 'https:',
        body: `grant_type=password&username=${USER}&password=${PASSWORD}&scope=fr:idm:*&client_id=${ADMIN_CLIENT}&client_secret=${ADMIN_CLIENT_SECRET}`,
        headers: {"Content-Type":"application/x-www-form-urlencoded"}
    };
    requestOptionsStep1['headers']['User-Agent'] = [synthetics.getCanaryUserAgentString(), requestOptionsStep1['headers']['User-Agent']].join(' ');

    // Set step config option for Get Access Token
   let stepConfig1 = {
        includeRequestHeaders: false,
        includeResponseHeaders: false,
        includeRequestBody: false,
        includeResponseBody: false,
        restrictedHeaders: [],
        continueOnHttpStepFailure: true
    };

    await synthetics.executeHttpStep('Get Access Token', requestOptionsStep1, validateSuccessfull1, stepConfig1);

    // Set request option for Verify Connector Health
    let requestOptionsStep2 = {
        hostname: FIDC_URL.replace('https://', ''),
        method: 'POST',
        path: '/openidm/system?_action=testConnectorServers',
        port: '443',
        protocol: 'https:',
        body: "",
        headers: {"Content-Type":"application/json","Authorization":`Bearer ${accessToken}`}
    };
    requestOptionsStep2['headers']['User-Agent'] = [synthetics.getCanaryUserAgentString(), requestOptionsStep2['headers']['User-Agent']].join(' ');
    
    console.log(requestOptionsStep2)

    // Set step config option for Verify Connector Health
   let stepConfig2 = {
        includeRequestHeaders: false,
        includeResponseHeaders: false,
        includeRequestBody: false,
        includeResponseBody: false,
        restrictedHeaders: [],
        continueOnHttpStepFailure: true
    };

    await synthetics.executeHttpStep('Verify Connector Health', requestOptionsStep2, validateSuccessfull2, stepConfig2);

    
};

exports.handler = async () => {
    return await rcsMonitoring();
};

