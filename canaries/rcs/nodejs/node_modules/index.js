var synthetics = require('Synthetics');
const log = require('SyntheticsLogger');

const rcsMonitoring = async function () {

    let accessToken;
    const { FIDC_URL, USER, PASSWORD, ADMIN_CLIENT, ADMIN_CLIENT_SECRET, MONITORED_COMPONENT } = process.env

    const validateAccessToken = async function (res) {
        return new Promise((resolve, reject) => {
            if (res.statusCode < 200 || res.statusCode > 299) {
                throw res.statusCode + ' ' + res.statusMessage;
            }

            let responseBody = '';
            res.on('data', (d) => {
                responseBody += d;
            });

            res.on('end', () => {
                // Add validation on 'responseBody' here if required.
                accessToken = JSON.parse(responseBody).access_token;
                resolve();
            });
        });
    };

    const validateConnectorHealth = async function (res) {
        return new Promise((resolve, reject) => {
            if (res.statusCode < 200 || res.statusCode > 299) {
                throw res.statusCode + ' ' + res.statusMessage;
            }

            let responseBody = '';
            res.on('data', (d) => {
                responseBody += d;
            });

            res.on('end', () => {
                const connectors = JSON.parse(responseBody).openicf.filter(conn => MONITORED_COMPONENT.includes(conn.name))
                const monitoredLength = MONITORED_COMPONENT.split(',').length
                if (connectors.length === monitoredLength && connectors.every(conn => conn.ok)) {
                    resolve();
                } else {
                    reject(JSON.stringify(connectors))
                }
            });
        });
    };


    // Set request option for Get Access Token
    const pw = `${PASSWORD}`
    const encodedPassword = encodeURIComponent(pw)
    const clientSecret = `${ADMIN_CLIENT_SECRET}`
    const encodedClientSecret = encodeURIComponent(clientSecret)

    let requestAccessToken = {
        hostname: FIDC_URL.replace('https://', ''),
        method: 'POST',
        path: '/am/oauth2/realms/root/realms/alpha/access_token?auth_chain=PasswordGrant',
        port: '443',
        protocol: 'https:',
        body: `grant_type=password&username=${USER}&password=${encodedPassword}&scope=fr:idm:*&client_id=${ADMIN_CLIENT}&client_secret=${encodedClientSecret}`,
        headers: { "Content-Type": "application/x-www-form-urlencoded" }
    };
    requestAccessToken['headers']['User-Agent'] = [synthetics.getCanaryUserAgentString(), requestAccessToken['headers']['User-Agent']].join(' ');

    // Set step config option for Get Access Token
    let configAccessToken = {
        includeRequestHeaders: false,
        includeResponseHeaders: false,
        includeRequestBody: false,
        includeResponseBody: false,
        restrictedHeaders: [],
        continueOnHttpStepFailure: true
    };

    await synthetics.executeHttpStep('Get Access Token', requestAccessToken, validateAccessToken, configAccessToken);

    // Set request option for Verify Connector Health
    let requestConnectorHealth = {
        hostname: FIDC_URL.replace('https://', ''),
        method: 'POST',
        path: '/openidm/system?_action=testConnectorServers',
        port: '443',
        protocol: 'https:',
        body: "",
        headers: { "Content-Type": "application/json", "Authorization": `Bearer ${accessToken}` }
    };
    requestConnectorHealth['headers']['User-Agent'] = [synthetics.getCanaryUserAgentString(), requestConnectorHealth['headers']['User-Agent']].join(' ');

    // Set step config option for Verify Connector Health
    let configConnectorHealth = {
        includeRequestHeaders: false,
        includeResponseHeaders: false,
        includeRequestBody: false,
        includeResponseBody: false,
        restrictedHeaders: [],
        continueOnHttpStepFailure: true
    };

    await synthetics.executeHttpStep('Verify Connector Health', requestConnectorHealth, validateConnectorHealth, configConnectorHealth);


};

exports.handler = async () => {
    return await rcsMonitoring();
};

